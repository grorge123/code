#include<bits/stdc++.h>
using namespace std;
#define F first
#define S second
#define pii pair<int,int>
const int INF=INT_MAX;
struct node{
    int x,y,p,num;
    node(){}
    node(int a,int b,int c,int d){x=a,y=b,p=c,num=d;}
};
double vec(node & a,node & b){
        return sqrt(((a.x-b.x)*(a.x-b.x))+((a.y-b.y)*(a.y-b.y)));
}
struct line{
    int a,b;
    double c;
    bool match=false;
    line(){}
    line(int d,int e,int f){a=d,b=e,c=f,match=false;}
    bool operator < (line & an){
        return c<an.c;
    }
};
int fa[1005];
int fifa(int a){
    if(fa[a]==a)return a;
    return fa[a]=fifa(fa[a]);
}
void DFS(int now,int st,int *MAX,bool visit[],vector<node> ve,vector<pii> s[]){
    visit[now]=true;
    *MAX=max(*MAX,ve[now].p);
    for(int i=0;i<s[now].size();i++){
        if(!visit[s[now][i].F]&&s[now][i].F!=st){
            DFS(s[now][i].F,st,MAX,visit,ve,s);
        }
    }
    return;
}
int main(){
    int t;
    cin >> t;
    while(t--){
        vector<node> ve;
        vector<line> li;
        vector<pii> s[1005];
        int n,all=0;
        cin >> n;
        for(int i=0;i<=n;i++)fa[i]=i;
        for(int i=0;i<n;i++){
            int x,y,p;
            cin >> x>> y>>p;
            ve.push_back(node(x,y,p,i));
            for(int q=0;q<i;q++){
                li.push_back(line(ve[q].num,ve[i].num,vec(ve[i],ve[q])));
            }
        }
        sort(li.begin(),li.end());
        for(int i=0;i<li.size();i++){
            if(fifa(li[i].a)!=fifa(li[i].b)){
//                cout << li[i].a<<" "<<li[i].b<<" "<<li[i].c<<endl;
                fa[fifa(li[i].a)]=fifa(li[i].b);
                li[i].match=true;
                s[li[i].a].push_back(pii(li[i].b,li[i].c));
                s[li[i].b].push_back(pii(li[i].a,li[i].c));
                all+=li[i].c;
            }
        }
        double ans=0;
//        cout << all<<endl;
        for(int i=0;i<li.size();i++){
            if(li[i].match){
                int MAXa=0,MAXb=0;
                bool visit[1005]={};
                DFS(li[i].a,li[i].b,&MAXa,visit,ve,s);
                DFS(li[i].b,li[i].a,&MAXb,visit,ve,s);
//                cout <<li[i].a<<" "<<li[i].b<<" "<< MAXa<<" "<<MAXb<<endl;
                ans=max(ans,double(MAXa+MAXb)/(all-li[i].c));
            }
        }
        printf("%.2f\n",ans);
    }
    return 0;
}
