#include<iostream>
#include<string.h>
#include<vector>
#include<queue>
using namespace std;
#define F first
#define S second
#define pii pair<int,int>
#define LL long long int
const int INF=0x7f7f7f7f;
pii s[205];
LL path[1505][1505]={};
struct node{
    int n,k;
    node(){n=0,k=0;}
    node(int two,int three){
        n=two,k=three;
    }
};
int st=402,en=404,deep[410]={};
node ve[410][410];
bool bfs(int n,int m){
    memset(deep,0,sizeof(deep));
    queue<int> qu;
    deep[st]=1;
    qu.push(st);
    while(!qu.empty()){
        int now=qu.front();qu.pop();
        for(int i=0;i<=n;i++){
            if(deep[i]==0&&ve[now][i].k>0){
                deep[i]=deep[now]+1;
                qu.push(i);
            }
        }
    }
    if(deep[en]==0)
        return false;
    return true;
}
int flow(int now,int en,vector<int> qu,int used[],int n,int m){
    if(now==en){
        int all=INF;
        for(int i=0;i<qu.size()-1;i++){
            all=min(all,ve[qu[i]][qu[i+1]].k);
        }
        for(int i=0;i<qu.size()-1;i++){
//            cout << qu[i]<<' '<<qu[i+1]<<endl;
            ve[qu[i]][qu[i+1]].k-=all;
            ve[qu[i+1]][qu[i]].k+=all;
        }
        return all;
    }
    for(int i=0;i<=n;i++){
        if(deep[now]<deep[i]&&ve[now][i].k>0&&used[i]==0){
            used[i]=1;
            qu.push_back(i);
            if(int re=flow(i,en,qu,used,n,m))return re;
            qu.pop_back();
            used[i]=0;
        }
    }
    return 0;
}
int dinic(int n,int m){
    int ans=0;
    while(bfs(n,m)){
        vector<int> qu;
        qu.push_back(st);
        int used[410]={};
        while(int d=flow(st,en,qu,used,n,m)){
            ans+=d;
        }
    }
    return ans;
}
bool check(int mid,int n,int m,int all){
    for(int i=0;i<406;i++){
        for(int q=0;q<406;q++){
            ve[i][q].k=ve[i][q].n=0;
        }
    }
    for(int i=0;i<n;i++){
        ve[st][i].n=ve[st][i].k=s[i].first;
//        ve[i][st].n=ve[i][st].k=s[i].first;
        ve[n+i][en].n=ve[n+i][en].k=s[i].S;
//        ve[en][n+i].n=ve[en][n+i].k=s[i].S;
    }
    for(int i=0;i<n;i++){
        for(int q=n;q<n*2;q++){
            if(path[i][q-n]<=mid){
                ve[i][q].n=ve[i][q].k=INF;
//                ve[q][i].n=ve[q][i].k=INF;
            }
        }
    }
//    for(int i=0;i<n*2;i++){
//        for(int q=0;q<n*2;q++){
//            cout << ve[i][q].n<<' ';
//        }
//        cout << endl;
//    }
//    for(int i=0;i<n*2;i++){
//        cout << ve[st][i].n<<' '<<ve[i][st].n<<' '<<ve[i][en].n<<' '<<ve[en][i].n<<endl;
//    }
    if(dinic(406,m)==all)return true;
    return false;
}
int lower(int l,int r,int n,int m,int all){
    int re=-1;
    while(l<=r){
        int mid=(l+r)/2;
//        cout <<mid<<' '<<check(mid,n,m,all)<<endl;
        if(check(mid,n,m,all)){
            re=mid;
            r=mid-1;
        }else{
            l=mid+1;
        }
//        cout << re<<endl;
    }
    return re;
}
int main(){
    int n,m,all=0;
    cin >> n>>m;
    for(int i=0;i<n+10;i++){
        for(int q=0;q<n+10;q++){
            if(i!=q)path[i][q]=INF;
        }
    }
    for(int i=0;i<n;i++){
        cin >> s[i].F>>s[i].S;
        all+=s[i].F;
    }
    for(int i=0;i<m;i++){
        LL a,b,c;
        cin >> a>> b>>c;
        a--;b--;
        path[a][b]=min(c,path[a][b]);
        path[b][a]=min(c,path[b][a]);
    }
    int MAX=0;
    for(int k=0;k<n;k++){
        for(int q=0;q<n;q++){
            for(int i=0;i<n;i++){
                path[i][q]=min(path[i][q],path[i][k]+path[k][q]);
                if(path[i][q]!=INF&&path[i][q]>MAX){
                    MAX=path[i][q];
                }
            }
        }
    }
//    for(int i=0;i<n;i++){
//        for(int q=0;q<n;q++){
//            cout << path[i][q]<<' ';
//        }
//        cout << endl;
//    }
//    cout << check(70,n,m,all);
    int ans=lower(0,MAX,n,m,all);
    cout << ans;
    return 0;
}
