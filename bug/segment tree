#include<cstdio>
#include<bits/stdc++.h>
using namespace std;
//#define max(a,b) a>b?a:b
//#define min(a,b) a<b?a:b
const int Max=100005;
vector<int> vans;
long long int s[Max*4]={},sl[Max*4]={},sr[Max*4]={},sm[Max*4]={};
void build(int id,int l,int r){
    if(l==r){
        cin >> s[id];
        sl[id]=s[id];
        sr[id]=s[id];
        sm[id]=s[id];
        return;
    }
    int m=(l+r)/2;
    build(id*2,l,m);
    build(id*2+1,m+1,r);
    int a=max(s[id*2],max(s[id*2+1],sr[id*2]+sl[id*2+1])),nl,nr;
    if(a<0){a=0,nl=0,nr=0;}
    if(a==sr[id*2]+sl[id*2+1]){nl=sm[id*2]+sl[id*2+1],nr=sm[id*2+1]+sr[id*2];}
    if(a==s[id*2]){nl=max(sm[id*2]+sl[id*2+1],sl[id*2]),nr=max(sm[id*2+1]+sr[id*2],sr[id*2+1]);}
    if(a==s[id*2+1]){nr=max(sm[id*2+1]+sr[id*2],sr[id*2+1]),nl=max(sm[id*2]+sl[id*2+1],sl[id*2]);}
    if(nl<0)nl=0;
    if(nr<0)nr=0;
    s[id]=a;
    sr[id]=nr;
    sl[id]=nl;
    sm[id]=sm[id*2]+sm[id*2+1];
    return;
}
long long int query_line(int L,int R,int id,int l,int r,int ty){
    if(L<=l&&R>=r){
        vans.push_back(id);
        return 0;
    }
    int m=(l+r)/2;
    long long int a=0;
    if(m>=L) a+=query_line(L,R,id*2,l,m,1);
    if(m<R) a+=query_line(L,R,id*2+1,m+1,r,2);
    return a;

}
int main(){
    int N,Q;
    scanf("%d %d",&N,&Q);
    build(1,1,N);
//    for(int i=0;i<20;i++){
//        cout << s[i]<<" ";
//    }
//    cout << endl;
//    for(int i=0;i<20;i++){
//        cout << sl[i]<<" ";
//    }
//    cout << endl;
//    for(int i=0;i<20;i++){
//        cout << sr[i]<<" ";
//    }
//    cout << endl;
    for(int i=0;i<Q;i++){
        int a,b;
        vans.clear();
        scanf("%d %d",&a,&b);
        long long int ans=0;
        query_line(a,b,1,1,N,0);
//        for(int i=0;i<vans.size();i++){
//            cout << vans[i]<<" ";
//        }
//        cout << endl;
        for(int i=1;i<vans.size();i++){
            ans=max(ans,sr[vans[i-1]]+sl[vans[i]]);
            ans=max(ans,s[vans[i]]);
        }
        ans=max(ans,s[vans[0]]);
        if(vans.size()>=3){
            long long int al=sr[vans[0]]+sl[vans[vans.size()-1]];
            for(int i=0;i<vans.size()-1;i++){
                al+=sm[vans[i]];
            }
            ans=max(ans,al);
        }
        cout <<(ans>0?ans:0)<<endl;
    }

}
